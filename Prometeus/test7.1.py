'''
Розробити класс Sphere для представлення сфери у тривимірному просторі.
Забезпечити наступні методи класу:
конструктор, який приймає 4 дійсних числа: радіус, та 3 координати центру кулі. Якщо конструктор 
викликається без аргументів, створити об'єкт сфери із одиничним радіусом та центром у початку координат. 
Якщо конструктор викликається з 1 аргументом, створити об'єкт сфери з відповідним радіусом та центром у 
початку координат.
метод get_volume(), який повертає дійсне число -- об'єм кулі, обмеженої поточною сферою.
метод get_square(), який повертає дійсне число -- площу зовнішньої поверхні сфери.
метод get_radius(), який повертає дійсне число -- радіус сфери.
метод get_center(), який повертає тьюпл із 3 дійсними числами -- координатами центра сфери в тому ж 
порядку, в яком вони задаються в конструкторі.
метод set_radius(r), який приймає 1 аргумент -- дійсне число, та змінює радіус поточної сфери, нічого не 
повертаючи.
метод set_center(x,y,z), який приймає 3 аргументи -- дійсних числа, та змінює координати центра сфери, 
нічого не повертаючи. Координати задаються в тому ж порядку, що і в конструкторі.
метод is_point_inside(x,y,z), який приймає 3 аргументи -- дійсних числа -- координати деякої точки в 
просторі (в тому ж порядку, що і в конструкторі), та повертає логічне значення True або False в залежності
чого, чи знаходиться ця точка всередині сфери.
'''


class Sphere(object):
    def __init__(self, radius, x=0.0, y=0.0, z=0.0):
        self.radius = radius
        self.x = x
        self.y = y
        self.z = z

    def get_volume(self):
        pi = 3.141592653589793
        v = 4 / 3 * pi * (self.radius ** 3)
        return v

    def get_square(self):
        pi = 3.141592653589793
        s = 4 * pi * self.radius * self.radius
        return s

    def get_radius(self):
        return self.radius

    def get_center(self):
        return self.x, self.y, self.z

    def set_radius(self, radius):
        self.radius = radius

    def set_center(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def is_point_inside(self, x, y, z):
        if abs(x - self.x) <= self.radius and abs(y - self.y) <= self.radius and abs(z - self.z) <= self.radius:
            return True
        else:
            return False
